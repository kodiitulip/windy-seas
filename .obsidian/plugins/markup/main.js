/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MarkupPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var NUM_COLORS = 5;
var NUM_COMMANDS = NUM_COLORS * 2;
var DEFAULT_SETTINGS = {
  Colors: [
    ["Red", "#FF0A0A"],
    ["Green", "#00C800"],
    ["Orange", "#DD7700"],
    ["Yellow", "#FFFF00"],
    ["Teal", "#00FFFF"]
  ],
  HighlightColors: [
    ["Black on Yellow", "#000000", "#FFFF00"],
    ["Black on Green", "#000000", "#00FF00"],
    ["White on Red", "#FFFFFF", "#FF0000"],
    ["Black on Teal", "#000000", "#00FFFF"],
    ["White on Purple", "#FFFFFF", "#FF00FF"]
  ]
};
var MarkupPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.CommandIDs = new Array(NUM_COMMANDS).fill("");
  }
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "markup-toggle-bold",
      name: "Toggle bold status",
      editorCallback: () => {
        this.BoldSelected = !this.BoldSelected;
        new Notice("Markup: Bold status " + (this.BoldSelected ? "ON" : "OFF"));
      }
    });
    this.addCommand({
      id: "markup-toggle-italic",
      name: "Toggle italic status",
      editorCallback: () => {
        this.ItalicSelected = !this.ItalicSelected;
        new Notice("Markup: Italic status " + (this.ItalicSelected ? "ON" : "OFF"));
      }
    });
    this.RegisterCommands();
    {
      const ColorStatusBarItem = this.addStatusBarItem();
      (0, import_obsidian.setIcon)(ColorStatusBarItem, "palette");
      (0, import_obsidian.setTooltip)(
        ColorStatusBarItem,
        "Color selected text",
        { placement: "top" }
      );
      ColorStatusBarItem.classList.add("mod-clickable");
      ColorStatusBarItem.addEventListener("click", this.OpenColorMenu);
      ColorStatusBarItem.Plugin = this;
    }
    {
      const HighlightStatusBarItem = this.addStatusBarItem();
      (0, import_obsidian.setIcon)(HighlightStatusBarItem, "highlighter");
      (0, import_obsidian.setTooltip)(
        HighlightStatusBarItem,
        "Highlight selected text",
        { placement: "top" }
      );
      HighlightStatusBarItem.classList.add("mod-clickable");
      HighlightStatusBarItem.addEventListener("click", this.OpenHighlightMenu);
      HighlightStatusBarItem.Plugin = this;
    }
    {
      this.addCommand({
        id: "markup-remove-markup",
        name: "Remove markup from selected text",
        editorCallback: () => {
          this.RemoveSelectedTextMarkup();
        }
      });
      const RemoveMarkupStatusBarItem = this.addStatusBarItem();
      (0, import_obsidian.setIcon)(RemoveMarkupStatusBarItem, "remove-formatting");
      (0, import_obsidian.setTooltip)(
        RemoveMarkupStatusBarItem,
        "Remove markup from selected text",
        { placement: "top" }
      );
      RemoveMarkupStatusBarItem.classList.add("mod-clickable");
      RemoveMarkupStatusBarItem.addEventListener("click", this.OpenRemoveMarkupMenu);
      RemoveMarkupStatusBarItem.Plugin = this;
    }
    this.addSettingTab(new MarkupSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.Settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.Settings);
  }
  RegisterCommands() {
    for (let CommandIndex = 0; CommandIndex < NUM_COMMANDS; ++CommandIndex) {
      if (this.CommandIDs[CommandIndex]) {
        this.removeCommand(this.CommandIDs[CommandIndex]);
      }
    }
    for (let ColorIndex = 0; ColorIndex < NUM_COLORS; ++ColorIndex) {
      this.addCommand({
        id: "markup-color-text-" + (ColorIndex + 1),
        name: "Color selected text (" + this.Settings.Colors[ColorIndex][0] + ")",
        editorCallback: () => {
          this.ColorSelectedText(this.Settings.Colors[ColorIndex]);
        }
      });
    }
    for (let HighlightIndex = 0; HighlightIndex < NUM_COLORS; ++HighlightIndex) {
      this.addCommand({
        id: "markup-highlight-text-" + (HighlightIndex + 1),
        name: "Highlight selected text (" + this.Settings.HighlightColors[HighlightIndex][0] + ")",
        editorCallback: () => {
          this.HighlightSelectedText(this.Settings.HighlightColors[HighlightIndex]);
        }
      });
    }
  }
  GetEditor() {
    const Workspace = this.app.workspace;
    if (!Workspace) {
      return null;
    }
    if (!Workspace.activeEditor) {
      return null;
    }
    const EditorObj = Workspace.activeEditor.editMode.editor;
    if (!EditorObj) {
      return null;
    }
    return EditorObj;
  }
  GetSelectionPositions() {
    const EditorV = this.GetEditor();
    if (!EditorV) {
      return [{}, {}];
    }
    const SelectStartP = EditorV.getCursor("from");
    const SelectEndP = EditorV.getCursor("to");
    return [
      EditorV.getCursor("from"),
      EditorV.getCursor("to"),
      EditorV.getCursor("anchor"),
      EditorV.getCursor("head")
    ];
  }
  RemoveSelectedTextMarkup() {
    const EditorV = this.GetEditor();
    if (!EditorV) {
      return;
    }
    if (!EditorV.somethingSelected()) {
      return;
    }
    const PrefixRegex = /<span style="[^"]*">/g;
    const PostfixRegex = "</span>";
    let NewSelections = [];
    for (let SelectionID = 0; SelectionID < EditorV.listSelections().length; ++SelectionID) {
      const Selections = EditorV.listSelections();
      const ThisSelection = Selections[SelectionID];
      const Anchor = ThisSelection.anchor;
      const Head = ThisSelection.head;
      const From = Anchor.line > Head.line || Anchor.ch > Head.ch ? Head : Anchor;
      const To = Anchor.line > Head.line || Anchor.ch > Head.ch ? Anchor : Head;
      const CurSelection = EditorV.getRange(From, To);
      const Hits = CurSelection.match(PrefixRegex);
      if (!Hits) {
        return;
      }
      const NumHits = Hits.length;
      if (!NumHits) {
        return;
      }
      const NewString = CurSelection.replaceAll(PrefixRegex, "").replaceAll(PostfixRegex, "");
      EditorV.replaceRange(NewString, From, To);
    }
  }
  MarkupSelectedText(ColorStr, HighlightStr) {
    const EditorV = this.GetEditor();
    if (!EditorV) {
      return;
    }
    if (!EditorV.somethingSelected()) {
      new Notice("No text selected!");
      return;
    }
    this.RemoveSelectedTextMarkup();
    const Bold = this.BoldSelected;
    const Italic = this.ItalicSelected;
    const BoldStr = Bold ? "font-weight:bold;" : "";
    const ItalicStr = Italic ? "font-style:italic;" : "";
    const StyleStr = ColorStr + HighlightStr + BoldStr + ItalicStr;
    for (let SelectionID = 0; SelectionID < EditorV.listSelections().length; ++SelectionID) {
      const Selections2 = EditorV.listSelections();
      const ThisSelection = Selections2[SelectionID];
      const Anchor = ThisSelection.anchor;
      const Head = ThisSelection.head;
      const From = Anchor.line > Head.line || Anchor.ch > Head.ch ? Head : Anchor;
      const To = Anchor.line > Head.line || Anchor.ch > Head.ch ? Anchor : Head;
      const Prefix = '<span style="' + StyleStr + '">';
      const CurSelection = EditorV.getRange(From, To);
      const Postfix = "</span>";
      EditorV.replaceRange(Prefix + CurSelection + Postfix, From, To);
    }
    let NewSelections = [];
    const Selections = EditorV.listSelections();
    for (let SelectionID = 0; SelectionID < Selections.length; ++SelectionID) {
      const ThisSelection = Selections[SelectionID];
      const Head = ThisSelection.head;
      const CurP = Head.ch;
      let Line = Head.line;
      let NewP = CurP >= EditorV.getLine(Line).length ? CurP : CurP + 1;
      if (NewP == CurP && Line != EditorV.lastLine()) {
        NewP = 0;
        ++Line;
      }
      const NewHead = { ch: NewP, line: Line };
      NewSelections.push({ anchor: NewHead, head: NewHead });
    }
    EditorV.setSelections(NewSelections, 0);
  }
  ColorSelectedText(Color) {
    const ColorStr = "color:" + Color[1] + ";";
    this.MarkupSelectedText(ColorStr, "");
  }
  HighlightSelectedText(Colors) {
    const ColorStr = "color:" + Colors[1] + ";";
    const HighlightStr = "background:" + Colors[2] + "BB;";
    this.MarkupSelectedText(ColorStr, HighlightStr);
  }
  DoCheckboxItem(Event, Menu2, Setting2, Title, Icon) {
  }
  OpenColorMenu(Event) {
    const EditorV = this.Plugin.GetEditor();
    if (!EditorV) {
      return;
    }
    const ColorMenu = new import_obsidian.Menu();
    var ItemID = 0;
    ColorMenu.addItem(
      (BoldElement) => {
        BoldElement.setIcon("bold").setTitle("Bold").setChecked(this.Plugin.BoldSelected).onClick(() => {
          this.Plugin.BoldSelected = !this.Plugin.BoldSelected;
          BoldElement.setChecked(this.Plugin.BoldSelected);
          if (!this.Plugin.BoldSelected) {
            BoldElement.checkIconEl = null;
          }
          ColorMenu.showAtMouseEvent(Event);
        });
      }
    );
    ++ItemID;
    ColorMenu.addItem(
      (ItalicElement) => {
        ItalicElement.setIcon("italic").setTitle("Italic").setChecked(this.Plugin.ItalicSelected).onClick(() => {
          this.Plugin.ItalicSelected = !this.Plugin.ItalicSelected;
          ItalicElement.setChecked(this.Plugin.ItalicSelected);
          if (!this.Plugin.ItalicSelected) {
            ItalicElement.checkIconEl = null;
          }
          ColorMenu.showAtMouseEvent(Event);
        });
      }
    );
    ++ItemID;
    ColorMenu.addSeparator();
    ++ItemID;
    for (let ColorIndex = 0; ColorIndex < NUM_COLORS; ++ColorIndex) {
      ColorMenu.addItem(
        (ColorItem) => {
          ColorItem.setIcon("case-sensitive").setTitle(this.Plugin.Settings.Colors[ColorIndex][0]).setChecked(false).onClick(() => {
            this.Plugin.ColorSelectedText(this.Plugin.Settings.Colors[ColorIndex]);
            EditorV.focus();
          });
        }
      );
      const ItemEl = ColorMenu.items[ItemID];
      ItemEl.iconEl.style.color = this.Plugin.Settings.Colors[ColorIndex][1];
      ++ItemID;
    }
    ColorMenu.showAtMouseEvent(Event);
  }
  OpenHighlightMenu(Event) {
    const EditorV = this.Plugin.GetEditor();
    if (!EditorV) {
      return;
    }
    const HighlightMenu = new import_obsidian.Menu();
    var ItemID = 0;
    HighlightMenu.addItem(
      (BoldElement) => {
        BoldElement.setIcon("bold").setTitle("Bold").setChecked(this.Plugin.BoldSelected).onClick(() => {
          this.Plugin.BoldSelected = !this.Plugin.BoldSelected;
          BoldElement.setChecked(this.Plugin.BoldSelected);
          if (!this.Plugin.BoldSelected) {
            BoldElement.checkIconEl = null;
          }
          HighlightMenu.showAtMouseEvent(Event);
        });
      }
    );
    ++ItemID;
    HighlightMenu.addItem(
      (ItalicElement) => {
        ItalicElement.setIcon("italic").setTitle("Italic").setChecked(this.Plugin.ItalicSelected).onClick(() => {
          this.Plugin.ItalicSelected = !this.Plugin.ItalicSelected;
          ItalicElement.setChecked(this.Plugin.ItalicSelected);
          if (!this.Plugin.ItalicSelected) {
            ItalicElement.checkIconEl = null;
          }
          HighlightMenu.showAtMouseEvent(Event);
        });
      }
    );
    ++ItemID;
    HighlightMenu.addSeparator();
    ++ItemID;
    for (let HighlightIndex = 0; HighlightIndex < NUM_COLORS; ++HighlightIndex) {
      HighlightMenu.addItem(
        (HighlightItem) => {
          HighlightItem.setIcon("case-sensitive").setTitle(this.Plugin.Settings.HighlightColors[HighlightIndex][0]).setChecked(false).onClick(() => {
            this.Plugin.HighlightSelectedText(this.Plugin.Settings.HighlightColors[HighlightIndex]);
            EditorV.focus();
          });
        }
      );
      const ItemEl = HighlightMenu.items[ItemID];
      ItemEl.iconEl.style.color = this.Plugin.Settings.HighlightColors[HighlightIndex][1];
      ItemEl.iconEl.style.backgroundColor = this.Plugin.Settings.HighlightColors[HighlightIndex][2];
      ++ItemID;
    }
    HighlightMenu.showAtMouseEvent(Event);
  }
  OpenRemoveMarkupMenu(Event) {
    const EditorV = this.Plugin.GetEditor();
    if (!EditorV) {
      return;
    }
    if (!EditorV.somethingSelected()) {
      return;
    }
    EditorV.focus();
    this.Plugin.RemoveSelectedTextMarkup();
  }
};
var MarkupSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(AppObj, PluginObj) {
    super(AppObj, PluginObj);
    this.PluginObj = PluginObj;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    {
      new import_obsidian.Setting(containerEl).setName("Color Palette").setDesc("Set the available colored text menu options.").setHeading();
      for (let ColorIndex = 0; ColorIndex < NUM_COLORS; ++ColorIndex) {
        new import_obsidian.Setting(containerEl).setName("Color " + (ColorIndex + 1)).addExtraButton(
          (ExtraButton) => ExtraButton.setIcon("rotate-ccw").setTooltip("Restore default", { placement: "top" }).onClick(async () => {
            this.PluginObj.Settings.Colors[ColorIndex] = DEFAULT_SETTINGS.Colors[ColorIndex];
            await this.PluginObj.saveSettings();
            this.display();
          })
        ).addTextArea(
          (ColorPicker) => ColorPicker.setValue(this.PluginObj.Settings.Colors[ColorIndex][0]).onChange(async (Value) => {
            this.PluginObj.Settings.Colors[ColorIndex][0] = Value;
            await this.PluginObj.saveSettings();
            this.PluginObj.RegisterCommands();
          })
        ).addColorPicker(
          (ColorPicker) => ColorPicker.setValue(this.PluginObj.Settings.Colors[ColorIndex][1]).onChange(async (Value) => {
            this.PluginObj.Settings.Colors[ColorIndex][1] = Value;
            await this.PluginObj.saveSettings();
          })
        );
      }
    }
    {
      new import_obsidian.Setting(containerEl).setName("Highlight Palette").setDesc("Set the available highlighter menu options. Left value is the text color, right is the background.").setHeading();
      for (let HighlightIndex = 0; HighlightIndex < NUM_COLORS; ++HighlightIndex) {
        new import_obsidian.Setting(containerEl).setName("Highlight " + (HighlightIndex + 1)).addExtraButton(
          (ExtraButton) => ExtraButton.setIcon("rotate-ccw").setTooltip("Restore default", { placement: "top" }).onClick(async () => {
            this.PluginObj.Settings.HighlightColors[HighlightIndex] = DEFAULT_SETTINGS.HighlightColors[HighlightIndex];
            await this.PluginObj.saveSettings();
            this.display();
          })
        ).addTextArea(
          (HighlightPicker) => HighlightPicker.setValue(this.PluginObj.Settings.HighlightColors[HighlightIndex][0]).onChange(async (Value) => {
            this.PluginObj.Settings.HighlightColors[HighlightIndex][0] = Value;
            await this.PluginObj.saveSettings();
            this.PluginObj.RegisterCommands();
          })
        ).addColorPicker(
          (HighlightPicker) => HighlightPicker.setValue(this.PluginObj.Settings.HighlightColors[HighlightIndex][1]).onChange(async (Value) => {
            this.PluginObj.Settings.HighlightColors[HighlightIndex][1] = Value;
            await this.PluginObj.saveSettings();
          })
        ).addColorPicker(
          (HighlightPicker) => HighlightPicker.setValue(this.PluginObj.Settings.HighlightColors[HighlightIndex][2]).onChange(async (Value) => {
            this.PluginObj.Settings.HighlightColors[HighlightIndex][2] = Value;
            await this.PluginObj.saveSettings();
          })
        );
      }
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
